[{"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/index.js":"1","/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/App.js":"2","/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/Forms.js":"3","/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/AppOrig.js":"4","/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/Dashboard.js":"5","/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/Dashboard2.js":"6","/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/BasicLayout.js":"7","/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/ChildWindow.js":"8"},{"size":983,"mtime":1611677743459,"results":"9","hashOfConfig":"10"},{"size":5970,"mtime":1611779738266,"results":"11","hashOfConfig":"10"},{"size":5204,"mtime":1611425339370,"results":"12","hashOfConfig":"10"},{"size":376,"mtime":1611576087490,"results":"13","hashOfConfig":"10"},{"size":724,"mtime":1611578074712,"results":"14","hashOfConfig":"10"},{"size":382,"mtime":1611577807412,"results":"15","hashOfConfig":"10"},{"size":1846,"mtime":1611610146679,"results":"16","hashOfConfig":"10"},{"size":2506,"mtime":1611610198257,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1lvzpqs",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/index.js",[],["36","37"],"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/App.js",[],"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/Forms.js",[],"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/AppOrig.js",[],"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/Dashboard.js",[],"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/Dashboard2.js",[],"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/BasicLayout.js",["38","39","40"],"/Volumes/BOOTCAMP/webinar/extjs-react/webinarApp/react-webinar/src/ChildWindow.js",["41","42"],"import React, {useRef, useState, useEffect} from 'react';\n\nconst ChildWindow = (props) => {\n  const [ nwc, setNwc ] = useState(null)\n\n\n\n  const Ext = window['Ext']\n    const contentRef = useRef();\n    var newWidgetContainer = null;\n\n    const doResize = () => {\n      console.log('newWidgetContainer',newWidgetContainer)\n\n      //call this only for classic toolkit\n      if (newWidgetContainer !== null) {\n        if (newWidgetContainer.updateLayout !== undefined) {\n          console.log('ChildWindow - resize')\n          newWidgetContainer.updateLayout()\n        }\n      }\n    }\n\n    // console.log(props.widthchange)\n    // if (props.widthchange !== 0) {\n    //   //doResize()\n    //   setWidthChange(props.widthchange)\n    // }\n\n\n\n    const doResize2 = () => {\n      console.log('ChildWindow - resize2')\n      //call this only for classic toolkit\n      if (newWidgetContainer.updateLayout !== undefined) {\n          newWidgetContainer.updateLayout()\n      }\n  }\n\n    useEffect(() => {\n        newWidgetContainer = Ext.create('Ext.Container', {\n          width: '100%',\n          height: '100%',\n          layout: 'fit',\n          renderTo: contentRef.current\n        });\n        //console.log('setNwc',newWidgetContainer)\n        setNwc(newWidgetContainer)\n        //newWidgetContainer.add(props.item);\n\n        newWidgetContainer.add({\n          xtype: 'panel',\n          title: props.text,\n          layout: 'fit',\n          items: [\n            {xtype: 'button', text: 'Ext JS Button', border: true}\n          ]\n        });\n\n        //console.log(contentRef.current)\n        contentRef.current.addEventListener(\"resize\", doResize2);\n        window.addEventListener(\"resize\", doResize);\n        return () => {\n          window.removeEventListener('resize', doResize);\n          contentRef.current.removeEventListener('resize', doResize2);\n        }\n\n    }, []);\n\n      //console.log(nwc)\n  if (nwc !== null) {\n    nwc.updateLayout()\n  }\n\n    // TODO: I think this should be controlled by a flag passed in from SDM or something like manuallyHandleResize or something\n    // IF on line 10 should cover this\n    return (\n            // TODO: pull styles out.\n            <div className=\"rgl-rendered-ext-container\" ref={contentRef} style={{\n                fontSize: '11px',\n                width: '100%',\n                height: '100%',\n                border: '0px solid blue',\n                boxSizing: 'border-box'\n                }}>\n\n\n            </div>\n        );\n};\n\nexport default ChildWindow;",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":3,"column":15,"nodeType":"49","messageId":"50","endLine":3,"endColumn":28},{"ruleId":"47","severity":1,"message":"51","line":25,"column":9,"nodeType":"49","messageId":"50","endLine":25,"endColumn":11},{"ruleId":"47","severity":1,"message":"52","line":41,"column":13,"nodeType":"49","messageId":"50","endLine":41,"endColumn":14},{"ruleId":"53","severity":1,"message":"54","line":41,"column":30,"nodeType":"55","endLine":46,"endColumn":11},{"ruleId":"53","severity":1,"message":"56","line":65,"column":22,"nodeType":"49","endLine":65,"endColumn":29},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'WidthProvider' is defined but never used.","Identifier","unusedVar","'me' is assigned a value but never used.","'y' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'newWidgetContainer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","The ref value 'contentRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'contentRef.current' to a variable inside the effect, and use that variable in the cleanup function.","no-global-assign","no-unsafe-negation"]